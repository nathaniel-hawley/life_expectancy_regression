{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ca859436",
   "metadata": {},
   "source": [
    "# ðŸ“ˆ Life Expectancy Prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b9e32c7",
   "metadata": {},
   "source": [
    "This notebook contains regression modeling for predicting life expectancy based on health and economic indicators."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ed98749",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install lazypredict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "02eb18c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.metrics import r2_score, mean_squared_error\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "\n",
    "from lazypredict.Supervised import LazyRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b05840e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the dataset\n",
    "df = pd.read_csv('/content/Life Expectancy Data.csv')\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b575b72d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check for missing values\n",
    "missing_values = df.isnull().sum()\n",
    "print(\"Missing values:\\n\", missing_values)\n",
    "\n",
    "imputer = SimpleImputer(strategy=\"mean\")\n",
    "df.iloc[:,3:23] = imputer.fit_transform(df.iloc[:,3:23])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2ead4e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define dependent and independent variables\n",
    "X = df[['Adult Mortality', 'infant deaths', 'Alcohol',' HIV/AIDS', 'Schooling']]\n",
    "y = df['Life expectancy ']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "938c8611",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13df3daf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Multiple Linear Regression\n",
    "lr = LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "y_pred = lr.predict(X_test)\n",
    "\n",
    "print(\"=== Multiple Linear Regression ===\")\n",
    "print(\"R2:\", r2_score(y_test, y_pred))\n",
    "print(\"MSE:\", mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "987af62d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Polynomial Regression\n",
    "poly = PolynomialFeatures(degree=5, include_bias=False)\n",
    "X_poly_train = poly.fit_transform(X_train)\n",
    "X_poly_test = poly.transform(X_test)\n",
    "\n",
    "lr_poly = LinearRegression()\n",
    "lr_poly.fit(X_poly_train, y_train)\n",
    "y_poly_pred = lr_poly.predict(X_poly_test)\n",
    "\n",
    "print(\"=== Polynomial Regression (degree=5) ===\")\n",
    "print(\"R2:\", r2_score(y_test, y_poly_pred))\n",
    "print(\"MSE:\", mean_squared_error(y_test, y_poly_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61e1159d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# LazyPredict model comparison\n",
    "reg = LazyRegressor(verbose=0, ignore_warnings=True, custom_metric=None)\n",
    "models, predictions = reg.fit(X_train, X_test, y_train, y_test)\n",
    "print(\"=== LazyPredict Model Comparison ===\")\n",
    "print(models)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0028119b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Statsmodels OLS\n",
    "X_train_sm = sm.add_constant(X_train)\n",
    "model_sm = sm.OLS(y_train, X_train_sm).fit()\n",
    "print(model_sm.summary())\n",
    "print(\"P-values for coefficients:\")\n",
    "print(model_sm.pvalues)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7beed206",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Residuals & Fitted values\n",
    "residuals = model_sm.resid\n",
    "fitted = model_sm.fittedvalues\n",
    "\n",
    "# Residual vs Fitted plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.residplot(x=fitted, y=y_train, lowess=True,\n",
    "              line_kws={'color': 'red', 'lw': 1}, scatter_kws={'alpha':0.5})\n",
    "plt.xlabel(\"Fitted values\")\n",
    "plt.ylabel(\"Residuals\")\n",
    "plt.title(\"Residuals vs Fitted (Linearity & Homoscedasticity Check)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27785875",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Histogram and Q-Q plot of residuals\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.subplot(1, 2, 1)\n",
    "sns.histplot(residuals, kde=True)\n",
    "plt.title(\"Histogram of Residuals\")\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "sm.qqplot(residuals, line='45', fit=True, alpha=0.5)\n",
    "plt.title(\"Q-Q Plot of Residuals\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d17fdeb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Durbin-Watson test\n",
    "dw_stat = sm.stats.stattools.durbin_watson(residuals)\n",
    "print(\"Durbin-Watson statistic:\", dw_stat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2b6beee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# VIF calculation\n",
    "vif_data = pd.DataFrame()\n",
    "vif_data[\"Feature\"] = X_train.columns\n",
    "vif_data[\"VIF\"] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\n",
    "print(\"\\n=== Variance Inflation Factor (VIF) ===\")\n",
    "print(vif_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce70313c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Correlation heatmap\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(X_train.corr(), annot=True, cmap=\"coolwarm\")\n",
    "plt.title(\"Correlation Heatmap of Independent Variables\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
